/**
 * straw 4 the juce - Copyright (c) 2023, Lucio Asnaghi. All rights reserved.
 */

#include "straw_ScriptJuceGraphicsBindings.h"
#include "../straw_ScriptBindings.h"
#include "../straw_ScriptException.h"

#include "../../values/straw_VariantConverter.h"

#include "../pybind11/operators.h"

#include <functional>
#include <string_view>
#include <tuple>

//=================================================================================================

namespace straw::Bindings {

void registerJuceGraphicsBindings (pybind11::module_& m)
{
    using namespace juce;

    namespace py = pybind11;

    // ============================================================================================ juce::Point<>

    py::class_<Point<int>> (m, "PointInt")
        .def (py::init<>())
        /*
        .def (py::init<const Point<int>&>())
        .def (py::init<int, int>())
        */
        .def (py::self == py::self)
        .def (py::self != py::self)
        .def ("isOrigin", &Point<int>::isOrigin)
        .def ("isFinite", &Point<int>::isFinite)
        .def ("getX", &Point<int>::getX)
        .def ("getY", &Point<int>::getY)
        .def ("setX", &Point<int>::setX)
        .def ("setY", &Point<int>::setY)
        .def ("withX", &Point<int>::withX)
        .def ("withY", &Point<int>::withY)
        .def ("setXY", &Point<int>::setXY)
        .def ("addXY", &Point<int>::addXY)
        .def ("translated", &Point<int>::translated)
        .def (py::self + py::self)
        .def (py::self += py::self)
        .def (py::self - py::self)
        .def (py::self -= py::self)
        .def (py::self * py::self)
        .def (py::self *= py::self)
        .def (py::self * float())
        .def (py::self *= float())
        .def (py::self / py::self)
        .def (py::self /= py::self)
        .def (py::self / float())
        .def (py::self /= float())
        .def (-py::self)
        .def ("getDistanceFromOrigin", &Point<int>::getDistanceFromOrigin)
        .def ("getDistanceFrom", &Point<int>::getDistanceFrom)
        .def ("getDistanceSquaredFromOrigin", &Point<int>::getDistanceSquaredFromOrigin)
        .def ("getDistanceSquaredFrom", &Point<int>::getDistanceSquaredFrom)
        .def ("getAngleToPoint", &Point<int>::getAngleToPoint)
        .def ("rotatedAboutOrigin", &Point<int>::rotatedAboutOrigin)
        .def ("getPointOnCircumference", py::overload_cast<float, float>(&Point<int>::getPointOnCircumference, py::const_))
        .def ("getPointOnCircumference", py::overload_cast<float, float, float>(&Point<int>::getPointOnCircumference, py::const_))
        .def ("getDotProduct", &Point<int>::getDotProduct)
        //.def ("applyTransform", &Point<int>::applyTransform)
        //.def ("transformedBy", &Point<int>::transformedBy)
        .def ("toInt", &Point<int>::toInt)
        .def ("toFloat", &Point<int>::toFloat)
        .def ("toDouble", &Point<int>::toDouble)
        .def ("roundToInt", &Point<int>::roundToInt)
        .def ("toString", &Point<int>::toString)
        .def_property("x", &Point<int>::getX, &Point<int>::setX)
        .def_property("y", &Point<int>::getY, &Point<int>::setY)
    ;

    py::class_<Point<float>> (m, "PointFloat")
        .def (py::init<>())
        /*
        .def (py::init<const Point<float>&>())
        .def (py::init<float, float>())
        */
        .def (py::self == py::self)
        .def (py::self != py::self)
        .def ("isOrigin", &Point<float>::isOrigin)
        .def ("isFinite", &Point<float>::isFinite)
        .def ("getX", &Point<float>::getX)
        .def ("getY", &Point<float>::getY)
        .def ("setX", &Point<float>::setX)
        .def ("setY", &Point<float>::setY)
        .def ("withX", &Point<float>::withX)
        .def ("withY", &Point<float>::withY)
        .def ("setXY", &Point<float>::setXY)
        .def ("addXY", &Point<float>::addXY)
        .def ("translated", &Point<float>::translated)
        .def (py::self + py::self)
        .def (py::self += py::self)
        .def (py::self - py::self)
        .def (py::self -= py::self)
        .def (py::self * py::self)
        .def (py::self *= py::self)
        .def (py::self * float())
        .def (py::self *= float())
        .def (py::self / py::self)
        .def (py::self /= py::self)
        .def (py::self / float())
        .def (py::self /= float())
        .def (-py::self)
        .def ("getDistanceFromOrigin", &Point<float>::getDistanceFromOrigin)
        .def ("getDistanceFrom", &Point<float>::getDistanceFrom)
        .def ("getDistanceSquaredFromOrigin", &Point<float>::getDistanceSquaredFromOrigin)
        .def ("getDistanceSquaredFrom", &Point<float>::getDistanceSquaredFrom)
        .def ("getAngleToPoint", &Point<float>::getAngleToPoint)
        .def ("rotatedAboutOrigin", &Point<float>::rotatedAboutOrigin)
        .def ("getPointOnCircumference", py::overload_cast<float, float>(&Point<float>::getPointOnCircumference, py::const_))
        .def ("getPointOnCircumference", py::overload_cast<float, float, float>(&Point<float>::getPointOnCircumference, py::const_))
        .def ("getDotProduct", &Point<float>::getDotProduct)
        //.def ("applyTransform", &Point<float>::applyTransform)
        //.def ("transformedBy", &Point<float>::transformedBy)
        .def ("toInt", &Point<float>::toInt)
        .def ("toFloat", &Point<float>::toFloat)
        .def ("toDouble", &Point<float>::toDouble)
        .def ("roundToInt", &Point<float>::roundToInt)
        .def ("toString", &Point<float>::toString)
        .def_property("x", &Point<float>::getX, &Point<float>::setX)
        .def_property("y", &Point<float>::getY, &Point<float>::setY)
    ;

    // ============================================================================================ juce::Rectangle<>

    py::class_<Rectangle<int>> (m, "RectangleInt")
        .def ("isEmpty", &Rectangle<int>::isEmpty)
        .def ("isFinite", &Rectangle<int>::isFinite)
        .def ("getX", &Rectangle<int>::getX)
        .def ("getY", &Rectangle<int>::getY)
        .def ("getWidth", &Rectangle<int>::getWidth)
        .def ("getHeight", &Rectangle<int>::getHeight)
        .def ("getRight", &Rectangle<int>::getRight)
        .def ("getBottom", &Rectangle<int>::getBottom)
        .def ("getCentreX", &Rectangle<int>::getCentreX)
        .def ("getCentreX", &Rectangle<int>::getCentreX)
        .def ("getAspectRatio", &Rectangle<int>::getAspectRatio)
        .def ("getPosition", &Rectangle<int>::getPosition)
        .def ("getTopLeft", &Rectangle<int>::getTopLeft)
        .def ("getTopRight", &Rectangle<int>::getTopRight)
        .def ("getBottomLeft", &Rectangle<int>::getBottomLeft)
        .def ("getBottomRight", &Rectangle<int>::getBottomRight)
    ;

    py::class_<Rectangle<float>> (m, "RectangleFloat")
        .def ("isEmpty", &Rectangle<float>::isEmpty)
        .def ("isFinite", &Rectangle<float>::isFinite)
        .def ("getX", &Rectangle<float>::getX)
        .def ("getY", &Rectangle<float>::getY)
        .def ("getWidth", &Rectangle<float>::getWidth)
        .def ("getHeight", &Rectangle<float>::getHeight)
        .def ("getRight", &Rectangle<float>::getRight)
        .def ("getBottom", &Rectangle<float>::getBottom)
        .def ("getCentreX", &Rectangle<float>::getCentreX)
        .def ("getCentreX", &Rectangle<float>::getCentreX)
        .def ("getAspectRatio", &Rectangle<float>::getAspectRatio)
        .def ("getPosition", &Rectangle<float>::getPosition)
        .def ("getTopLeft", &Rectangle<float>::getTopLeft)
        .def ("getTopRight", &Rectangle<float>::getTopRight)
        .def ("getBottomLeft", &Rectangle<float>::getBottomLeft)
        .def ("getBottomRight", &Rectangle<float>::getBottomRight)
    ;

    // ============================================================================================ juce::PixelARGB

    py::class_<PixelARGB> (m, "PixelARGB")
        .def (py::init<>())
        //.def (py::init<uint8, uint8, uint8, uint8>())
        .def ("getNativeARGB", &PixelARGB::getNativeARGB)
        .def ("getInARGBMaskOrder", &PixelARGB::getInARGBMaskOrder)
        .def ("getInARGBMemoryOrder", &PixelARGB::getInARGBMemoryOrder)
        .def ("getEvenBytes", &PixelARGB::getEvenBytes)
        .def ("getOddBytes", &PixelARGB::getOddBytes)
        .def ("getAlpha", &PixelARGB::getAlpha)
        .def ("getRed", &PixelARGB::getRed)
        .def ("getGreen", &PixelARGB::getGreen)
        .def ("getBlue", &PixelARGB::getBlue)
        //.def ("set", &PixelARGB::set<?>)
        .def ("setARGB", &PixelARGB::setARGB)
        //.def ("blend", &PixelARGB::blend<?>)
        //.def ("blend", py::overload_cast<PixelRGB>(&PixelARGB::blend))
        //.def ("tween", &PixelARGB::tween<?>)
        .def ("setAlpha", &PixelARGB::setAlpha)
        //.def ("multiplyAlpha", py::overload_cast<float>(&PixelARGB::multiplyAlpha, py::const_))
        .def ("getUnpremultiplied", &PixelARGB::getUnpremultiplied)
        .def ("premultiply", &PixelARGB::premultiply)
        .def ("unpremultiply", &PixelARGB::unpremultiply)
        .def ("desaturate", &PixelARGB::desaturate)
    ;

    py::class_<PixelRGB> (m, "PixelRGB")
        .def (py::init<>())
        .def ("getNativeARGB", &PixelRGB::getNativeARGB)
        .def ("getInARGBMaskOrder", &PixelRGB::getInARGBMaskOrder)
        .def ("getInARGBMemoryOrder", &PixelRGB::getInARGBMemoryOrder)
        .def ("getEvenBytes", &PixelRGB::getEvenBytes)
        .def ("getOddBytes", &PixelRGB::getOddBytes)
        .def ("getAlpha", &PixelRGB::getAlpha)
        .def ("getRed", &PixelRGB::getRed)
        .def ("getGreen", &PixelRGB::getGreen)
        .def ("getBlue", &PixelRGB::getBlue)
        //.def ("set", &PixelRGB::set<?>)
        .def ("setARGB", &PixelRGB::setARGB)
        //.def ("blend", &PixelRGB::blend<?>)
        //.def ("blend", py::overload_cast<PixelRGB>(&PixelRGB::blend))
        //.def ("tween", &PixelRGB::tween<?>)
        .def ("setAlpha", &PixelRGB::setAlpha)
        //.def ("multiplyAlpha", py::overload_cast<float>(&PixelRGB::multiplyAlpha, py::const_))
        .def ("premultiply", &PixelRGB::premultiply)
        .def ("unpremultiply", &PixelRGB::unpremultiply)
        .def ("desaturate", &PixelRGB::desaturate)
    ;

    py::class_<PixelAlpha> (m, "PixelAlpha")
        .def (py::init<>())
        .def ("getNativeARGB", &PixelAlpha::getNativeARGB)
        .def ("getInARGBMaskOrder", &PixelAlpha::getInARGBMaskOrder)
        .def ("getInARGBMemoryOrder", &PixelAlpha::getInARGBMemoryOrder)
        .def ("getEvenBytes", &PixelAlpha::getEvenBytes)
        .def ("getOddBytes", &PixelAlpha::getOddBytes)
        .def ("getAlpha", &PixelAlpha::getAlpha)
        .def ("getRed", &PixelAlpha::getRed)
        .def ("getGreen", &PixelAlpha::getGreen)
        .def ("getBlue", &PixelAlpha::getBlue)
        //.def ("set", &PixelAlpha::set<?>)
        .def ("setARGB", &PixelAlpha::setARGB)
        //.def ("blend", &PixelAlpha::blend<?>)
        //.def ("blend", &PixelAlpha::blend<PixelRGB>)
        //.def ("tween", &PixelAlpha::tween<?>)
        .def ("setAlpha", &PixelAlpha::setAlpha)
        //.def ("multiplyAlpha", py::overload_cast<float>(&PixelAlpha::multiplyAlpha, py::const_))
        .def ("premultiply", &PixelAlpha::premultiply)
        .def ("unpremultiply", &PixelAlpha::unpremultiply)
        .def ("desaturate", &PixelAlpha::desaturate)
    ;

    // ============================================================================================ juce::Colour

    py::class_<Colour> (m, "Colour")
        .def (py::init<>())
        /*
        .def (py::init<uint32>())
        .def (py::init<uint8, uint8, uint8>())
        .def (py::init<uint8, uint8, uint8, uint8>())
        .def (py::init<uint8, uint8, uint8, float>())
        .def (py::init<float, float, float, uint8>())
        .def (py::init<float, float, float, float>())
        .def (py::init<PixelARGB>())
        .def (py::init<PixelRGB>())
        .def (py::init<PixelAlpha>())
        */
        .def_static ("fromRGB", &Colour::fromRGB)
        .def_static ("fromRGBA", &Colour::fromRGBA)
        .def_static ("fromFloatRGBA", &Colour::fromFloatRGBA)
        .def_static ("fromHSV", &Colour::fromHSV)
        .def_static ("fromHSL", &Colour::fromHSL)
        .def ("getRed", &Colour::getRed)
        .def ("getGreen", &Colour::getGreen)
        .def ("getBlue", &Colour::getBlue)
        .def ("getFloatRed", &Colour::getFloatRed)
        .def ("getFloatGreen", &Colour::getFloatGreen)
        .def ("getFloatBlue", &Colour::getFloatBlue)
        .def ("getPixelARGB", &Colour::getPixelARGB)
        .def ("getNonPremultipliedPixelARGB", &Colour::getNonPremultipliedPixelARGB)
        .def ("getARGB", &Colour::getARGB)
        .def ("getAlpha", &Colour::getAlpha)
        .def ("getFloatAlpha", &Colour::getFloatAlpha)
        .def ("isOpaque", &Colour::isOpaque)
        .def ("isTransparent", &Colour::isTransparent)
        .def ("withAlpha", py::overload_cast<float>(&Colour::withAlpha, py::const_))
        .def ("withMultipliedAlpha", &Colour::withMultipliedAlpha)
        .def ("overlaidWith", &Colour::overlaidWith)
        .def ("interpolatedWith", &Colour::interpolatedWith)
        .def ("getHue", &Colour::getHue)
        .def ("getSaturation", &Colour::getSaturation)
        .def ("getSaturationHSL", &Colour::getSaturationHSL)
        .def ("getBrightness", &Colour::getBrightness)
        .def ("getLightness", &Colour::getLightness)
        .def ("getPerceivedBrightness", &Colour::getPerceivedBrightness)
        .def ("withHue", &Colour::withHue)
        .def ("withSaturation", &Colour::withSaturation)
        .def ("withSaturationHSL", &Colour::withSaturationHSL)
        .def ("withBrightness", &Colour::withBrightness)
        .def ("withLightness", &Colour::withLightness)
        .def ("withRotatedHue", &Colour::withRotatedHue)
        .def ("withMultipliedSaturation", &Colour::withMultipliedSaturation)
        .def ("withMultipliedSaturationHSL", &Colour::withMultipliedSaturationHSL)
        .def ("withMultipliedBrightness", &Colour::withMultipliedBrightness)
        .def ("withMultipliedLightness", &Colour::withMultipliedLightness)
        .def ("brighter", &Colour::brighter)
        .def ("darker", &Colour::darker)
        .def ("contrasting", py::overload_cast<float>(&Colour::contrasting, py::const_))
        .def_static ("contrasting", py::overload_cast<Colour, Colour>(&Colour::contrasting))
        .def_static ("greyLevel", &Colour::greyLevel)
        .def ("toString", &Colour::toString)
        .def_static ("fromString", &Colour::fromString)
        .def ("toDisplayString", &Colour::toDisplayString)
    ;

    // ============================================================================================ juce::Image

    py::class_<Image> imageClass (m, "Image");

    imageClass
        .def (py::init<>())
        /*
        .def (py::init<Image::PixelFormat, int, int, bool>())
        .def (py::init<const Image&>())
        */
        .def (py::self == py::self)
        .def (py::self != py::self)
        .def ("isValid", &Image::isValid)
        .def ("isNull", &Image::isNull)
        .def ("getWidth", &Image::getWidth)
        .def ("getHeight", &Image::getHeight)
        .def ("getBounds", &Image::getBounds)
        .def ("getFormat", &Image::getFormat)
        .def ("isARGB", &Image::isARGB)
        .def ("isRGB", &Image::isRGB)
        .def ("isSingleChannel", &Image::isSingleChannel)
        .def ("hasAlphaChannel", &Image::hasAlphaChannel)
        .def ("clear", &Image::clear)
        //.def ("rescaled", &Image::rescaled)
        .def ("createCopy", &Image::createCopy)
        .def ("convertedToFormat", &Image::convertedToFormat)
        .def ("duplicateIfShared", &Image::duplicateIfShared)
        .def ("getClippedImage", &Image::getClippedImage)
        .def ("getPixelAt", &Image::getPixelAt)
        .def ("setPixelAt", &Image::setPixelAt)
        .def ("multiplyAlphaAt", &Image::multiplyAlphaAt)
        .def ("multiplyAllAlphas", &Image::multiplyAllAlphas)
        .def ("desaturate", &Image::desaturate)
        .def ("moveImageSection", &Image::moveImageSection)
        //.def ("createSolidAreaMask", &Image::createSolidAreaMask)
        //.def ("getProperties", &Image::getProperties)
        //.def ("createLowLevelContext", &Image::createLowLevelContext)
        .def ("getReferenceCount", &Image::getReferenceCount)
        //.def ("getPixelData", &Image::getPixelData)
    ;

    py::enum_<Image::PixelFormat> (imageClass, "Image")
        .value("UnknownFormat", Image::PixelFormat::UnknownFormat)
        .value("RGB", Image::PixelFormat::RGB)
        .value("ARGB", Image::PixelFormat::ARGB)
        .value("SingleChannel", Image::PixelFormat::SingleChannel)
        .export_values();
}

} // namespace straw::Bindings
